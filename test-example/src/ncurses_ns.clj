;; This file is autogenerated -- probably shouldn't modify it by hand
(clojure.core/ns
 bindings.ncurses-ns
 (:require [clojure.java.io])
 (:import
  org.graalvm.polyglot.Context
  org.graalvm.polyglot.Source
  org.graalvm.polyglot.Value)
 (:gen-class))

(def ^{:private true} empty-array (clojure.core/object-array 0))

(clojure.core/defn
 context-f612
 []
 (clojure.core/->
  (org.graalvm.polyglot.Context/newBuilder
   (clojure.core/into-array ["llvm"]))
  (.allowAllAccess true)
  (.build)))

(clojure.core/defn
 ^{:private true}
 source-f613
 []
 (clojure.core/->
  (org.graalvm.polyglot.Source/newBuilder
   "llvm"
   (if
    (clojure.core/string? "libs/libbindings$ncurses.so")
    (clojure.java.io/file "libs/libbindings$ncurses.so")
    "libs/libbindings$ncurses.so"))
  (.build)))

(def polyglot-context (context-f612))

(def polyglot-lib (.eval polyglot-context (source-f613)))

(def
 ^{:private true}
 -place-of-free
 (.getMember polyglot-lib "_SHADOWING_free"))

(clojure.core/defn
 free
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper ptr]
 (.executeVoid
  -place-of-free
  (clojure.core/object-array [(.unwrap ptr)])))

(def
 ^{:private true}
 -place-of-malloc
 (.getMember polyglot-lib "_SHADOWING_malloc"))

(clojure.core/defn
 malloc
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper size]
 (.executeVoid
  -place-of-malloc
  (clojure.core/object-array [(.unwrap size)])))

(def
 ^{:private true}
 -place-of-initscr
 (.getMember polyglot-lib "_SHADOWING_initscr"))

(clojure.core/defn
 initscr
 "Ret: {:wrapper nil, :annotation nil}"
 
 []
 (.execute -place-of-initscr (clojure.core/object-array [])))

(def
 ^{:private true}
 -place-of-delwin
 (.getMember polyglot-lib "_SHADOWING_delwin"))

(clojure.core/defn
 delwin
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper win]
 (clojure.core/->
  (.execute
   -place-of-delwin
   (clojure.core/object-array [(.unwrap win)]))
  .asInt))

(def
 ^{:private true}
 -place-of-endwin
 (.getMember polyglot-lib "_SHADOWING_endwin"))

(clojure.core/defn
 endwin
 "Ret: {:wrapper nil, :annotation nil}"
 
 []
 (clojure.core/->
  (.execute -place-of-endwin (clojure.core/object-array []))
  .asInt))

(def
 ^{:private true}
 -place-of-noecho
 (.getMember polyglot-lib "_SHADOWING_noecho"))

(clojure.core/defn
 noecho
 "Ret: {:wrapper nil, :annotation nil}"
 
 []
 (clojure.core/->
  (.execute -place-of-noecho (clojure.core/object-array []))
  .asInt))

(def
 ^{:private true}
 -place-of-curs-set
 (.getMember polyglot-lib "_SHADOWING_curs_set"))

(clojure.core/defn
 curs-set
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper visibility]
 (clojure.core/->
  (.execute
   -place-of-curs-set
   (clojure.core/object-array [(.unwrap visibility)]))
  .asInt))

(def
 ^{:private true}
 -place-of-mvprintw
 (.getMember polyglot-lib "_SHADOWING_mvprintw"))

(clojure.core/defn
 mvprintw
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper
  y
  ^clobits.all_targets.IWrapper
  x
  ^clobits.all_targets.IWrapper
  fmt]
 (clojure.core/->
  (.execute
   -place-of-mvprintw
   (clojure.core/object-array [(.unwrap y) (.unwrap x) (.unwrap fmt)]))
  .asInt))

(def
 ^{:private true}
 -place-of-clear
 (.getMember polyglot-lib "_SHADOWING_clear"))

(clojure.core/defn
 clear
 "Ret: {:wrapper nil, :annotation nil}"
 
 []
 (clojure.core/->
  (.execute -place-of-clear (clojure.core/object-array []))
  .asInt))

(def
 ^{:private true}
 -place-of-getmaxx
 (.getMember polyglot-lib "_SHADOWING_getmaxx"))

(clojure.core/defn
 getmaxx
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper win]
 (clojure.core/->
  (.execute
   -place-of-getmaxx
   (clojure.core/object-array [(.unwrap win)]))
  .asInt))

(def
 ^{:private true}
 -place-of-getmaxy
 (.getMember polyglot-lib "_SHADOWING_getmaxy"))

(clojure.core/defn
 getmaxy
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper win]
 (clojure.core/->
  (.execute
   -place-of-getmaxy
   (clojure.core/object-array [(.unwrap win)]))
  .asInt))

(def
 ^{:private true}
 -place-of-getmaxyx
 (.getMember polyglot-lib "_SHADOWING_getmaxyx"))

(clojure.core/defn
 getmaxyx
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper
  win
  ^clobits.all_targets.IWrapper
  y
  ^clobits.all_targets.IWrapper
  x]
 (.executeVoid
  -place-of-getmaxyx
  (clojure.core/object-array [(.unwrap win) (.unwrap y) (.unwrap x)])))

(def
 ^{:private true}
 -place-of-printw
 (.getMember polyglot-lib "_SHADOWING_printw"))

(clojure.core/defn
 printw
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper arg0]
 (clojure.core/->
  (.execute
   -place-of-printw
   (clojure.core/object-array [(.unwrap arg0)]))
  .asInt))

(def
 ^{:private true}
 -place-of-refresh
 (.getMember polyglot-lib "_SHADOWING_refresh"))

(clojure.core/defn
 refresh
 "Ret: {:wrapper nil, :annotation nil}"
 
 []
 (clojure.core/->
  (.execute -place-of-refresh (clojure.core/object-array []))
  .asInt))

(def
 ^{:private true}
 -place-of-wrefresh
 (.getMember polyglot-lib "_SHADOWING_wrefresh"))

(clojure.core/defn
 wrefresh
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper win]
 (clojure.core/->
  (.execute
   -place-of-wrefresh
   (clojure.core/object-array [(.unwrap win)]))
  .asInt))

