;; This file is autogenerated -- probably shouldn't modify it by hand
(clojure.core/ns
 bindings.ncurses-ns
 (:require [clojure.java.io])
 (:import
  org.graalvm.polyglot.Context
  org.graalvm.polyglot.Source
  org.graalvm.polyglot.Value)
 (:gen-class))

(def ^{:private true} empty-array (clojure.core/object-array 0))

(clojure.core/defn
 context-f
 []
 (clojure.core/->
  (org.graalvm.polyglot.Context/newBuilder
   (clojure.core/into-array ["llvm"]))
  (.allowAllAccess true)
  (.build)))

(clojure.core/defn
 ^{:private true}
 source-f
 []
 (clojure.core/->
  (org.graalvm.polyglot.Source/newBuilder
   "llvm"
   (if
    (clojure.core/string? "libs/libbindings$ncurses.so")
    (clojure.java.io/file "libs/libbindings$ncurses.so")
    "libs/libbindings$ncurses.so"))
  (.build)))

(def polyglot-context (context-f))

(def polyglot-lib (.eval polyglot-context (source-f)))

(clojure.core/defn
 wrap-pointer
 [value]
 (clojure.core/reify clobits.all_targets.IWrapper (unwrap [_] value)))

(clojure.core/declare)

(def
 ^{:private true}
 -place-of-free
 (.getMember polyglot-lib "_SHADOWING_free"))

(clojure.core/defn
 free
 "Args:[{:interface clobits.all_targets.IVoidPointerYE, \"*\" {:interface clobits.all_targets.IVoidPointerYE, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :ni/unwrap .unwrap}, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :arg-symbol ptr, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :annotation clobits.all_targets.IVoidPointerYE, :ni/unwrap .unwrap}], Ret: {\"*\" {:interface clobits.all_targets.IVoidPointerYE, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :ni/unwrap .unwrap}, :ni/type void, :primitive true}"
 
 [^clobits.all_targets.IVoidPointerYE ptr]
 (.executeVoid
  -place-of-free
  (clojure.core/object-array [(.unwrap ptr)])))

(def
 ^{:private true}
 -place-of-malloc
 (.getMember polyglot-lib "_SHADOWING_malloc"))

(clojure.core/defn
 malloc
 "Args:[{:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true, :annotation long, :arg-symbol size}], Ret: {:interface clobits.all_targets.IVoidPointerYE, \"*\" {:interface clobits.all_targets.IVoidPointerYE, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :ni/unwrap .unwrap}, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :ni/unwrap .unwrap}"
 ^clobits.all_targets.IVoidPointerYE
 [^long size]
 (wrap-pointer
  (.executeVoid -place-of-malloc (clojure.core/object-array [size]))))

(def
 ^{:private true}
 -place-of-initscr
 (.getMember polyglot-lib "_SHADOWING_initscr"))

(clojure.core/defn
 initscr
 "Args:[], Ret: {:interface clobits.all_targets.IVoidPointerYE, \"*\" {:interface clobits.all_targets.IVoidPointerYE, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :ni/unwrap .unwrap}, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :ni/unwrap .unwrap}"
 ^clobits.all_targets.IVoidPointerYE
 []
 (wrap-pointer
  (.execute -place-of-initscr (clojure.core/object-array []))))

(def
 ^{:private true}
 -place-of-delwin
 (.getMember polyglot-lib "_SHADOWING_delwin"))

(clojure.core/defn
 delwin
 "Args:[{:interface clobits.all_targets.IVoidPointerYE, \"*\" {:interface clobits.all_targets.IVoidPointerYE, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :ni/unwrap .unwrap}, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :arg-symbol win, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :annotation clobits.all_targets.IVoidPointerYE, :ni/unwrap .unwrap}], Ret: {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true}"
 ^long
 [^clobits.all_targets.IVoidPointerYE win]
 (.asInt
  (.execute
   -place-of-delwin
   (clojure.core/object-array [(.unwrap win)]))))

(def
 ^{:private true}
 -place-of-endwin
 (.getMember polyglot-lib "_SHADOWING_endwin"))

(clojure.core/defn
 endwin
 "Args:[], Ret: {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true}"
 ^long
 []
 (.asInt (.execute -place-of-endwin (clojure.core/object-array []))))

(def
 ^{:private true}
 -place-of-noecho
 (.getMember polyglot-lib "_SHADOWING_noecho"))

(clojure.core/defn
 noecho
 "Args:[], Ret: {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true}"
 ^long
 []
 (.asInt (.execute -place-of-noecho (clojure.core/object-array []))))

(def
 ^{:private true}
 -place-of-curs-set
 (.getMember polyglot-lib "_SHADOWING_curs_set"))

(clojure.core/defn
 curs-set
 "Args:[{:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true, :annotation long, :arg-symbol visibility}], Ret: {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true}"
 ^long
 [^long visibility]
 (.asInt
  (.execute
   -place-of-curs-set
   (clojure.core/object-array [visibility]))))

(def
 ^{:private true}
 -place-of-mvprintw
 (.getMember polyglot-lib "_SHADOWING_mvprintw"))

(clojure.core/defn
 mvprintw
 "Args:[{:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true, :annotation long, :arg-symbol y} {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true, :annotation long, :arg-symbol x} {\"*\" {:ni/type org.graalvm.nativeimage.c.type.CCharPointer, :ni/wrapper clobits.wrappers.WrapPointer, :ni/unwrap .unwrap, :poly/type nil, :primitive false}, :poly/type nil, :ni/type org.graalvm.nativeimage.c.type.CCharPointer, :primitive false, :ni/wrapper clobits.wrappers.WrapPointer, :ni/unwrap .unwrap, :annotation nil, :arg-symbol fmt}], Ret: {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true}"
 ^long
 [^long y ^long x fmt]
 (.asInt
  (.execute -place-of-mvprintw (clojure.core/object-array [y x fmt]))))

(def
 ^{:private true}
 -place-of-clear
 (.getMember polyglot-lib "_SHADOWING_clear"))

(clojure.core/defn
 clear
 "Args:[], Ret: {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true}"
 ^long
 []
 (.asInt (.execute -place-of-clear (clojure.core/object-array []))))

(def
 ^{:private true}
 -place-of-getmaxx
 (.getMember polyglot-lib "_SHADOWING_getmaxx"))

(clojure.core/defn
 getmaxx
 "Args:[{:interface clobits.all_targets.IVoidPointerYE, \"*\" {:interface clobits.all_targets.IVoidPointerYE, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :ni/unwrap .unwrap}, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :arg-symbol win, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :annotation clobits.all_targets.IVoidPointerYE, :ni/unwrap .unwrap}], Ret: {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true}"
 ^long
 [^clobits.all_targets.IVoidPointerYE win]
 (.asInt
  (.execute
   -place-of-getmaxx
   (clojure.core/object-array [(.unwrap win)]))))

(def
 ^{:private true}
 -place-of-getmaxy
 (.getMember polyglot-lib "_SHADOWING_getmaxy"))

(clojure.core/defn
 getmaxy
 "Args:[{:interface clobits.all_targets.IVoidPointerYE, \"*\" {:interface clobits.all_targets.IVoidPointerYE, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :ni/unwrap .unwrap}, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :arg-symbol win, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :annotation clobits.all_targets.IVoidPointerYE, :ni/unwrap .unwrap}], Ret: {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true}"
 ^long
 [^clobits.all_targets.IVoidPointerYE win]
 (.asInt
  (.execute
   -place-of-getmaxy
   (clojure.core/object-array [(.unwrap win)]))))

(def
 ^{:private true}
 -place-of-getmaxyx
 (.getMember polyglot-lib "_SHADOWING_getmaxyx"))

(clojure.core/defn
 getmaxyx
 "Args:[{:interface clobits.all_targets.IVoidPointerYE, \"*\" {:interface clobits.all_targets.IVoidPointerYE, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :ni/unwrap .unwrap}, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :arg-symbol win, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :annotation clobits.all_targets.IVoidPointerYE, :ni/unwrap .unwrap} {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true, :annotation long, :arg-symbol y} {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true, :annotation long, :arg-symbol x}], Ret: {\"*\" {:interface clobits.all_targets.IVoidPointerYE, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :ni/unwrap .unwrap}, :ni/type void, :primitive true}"
 
 [^clobits.all_targets.IVoidPointerYE win ^long y ^long x]
 (.executeVoid
  -place-of-getmaxyx
  (clojure.core/object-array [(.unwrap win) y x])))

(def
 ^{:private true}
 -place-of-printw
 (.getMember polyglot-lib "_SHADOWING_printw"))

(clojure.core/defn
 printw
 "Args:[{\"*\" {:ni/type org.graalvm.nativeimage.c.type.CCharPointer, :ni/wrapper clobits.wrappers.WrapPointer, :ni/unwrap .unwrap, :poly/type nil, :primitive false}, :poly/type nil, :ni/type org.graalvm.nativeimage.c.type.CCharPointer, :primitive false, :ni/wrapper clobits.wrappers.WrapPointer, :ni/unwrap .unwrap, :annotation nil, :arg-symbol arg0}], Ret: {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true}"
 ^long
 [arg0]
 (.asInt
  (.execute -place-of-printw (clojure.core/object-array [arg0]))))

(def
 ^{:private true}
 -place-of-refresh
 (.getMember polyglot-lib "_SHADOWING_refresh"))

(clojure.core/defn
 refresh
 "Args:[], Ret: {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true}"
 ^long
 []
 (.asInt (.execute -place-of-refresh (clojure.core/object-array []))))

(def
 ^{:private true}
 -place-of-wrefresh
 (.getMember polyglot-lib "_SHADOWING_wrefresh"))

(clojure.core/defn
 wrefresh
 "Args:[{:interface clobits.all_targets.IVoidPointerYE, \"*\" {:interface clobits.all_targets.IVoidPointerYE, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :ni/unwrap .unwrap}, :ni/java-wrapper \"new clobits.wrappers.WrapVoid\", :ni/interface clobits.all_targets.IVoidPointer, :ni/wrapper clobits.wrappers.WrapVoid, :poly/type clobits.all_targets.IVoidPointerYE, :poly/unwrap .unwrap, :primitive false, :arg-symbol win, :ni/type org.graalvm.nativeimage.c.type.VoidPointer, :poly/wrapper wrap-pointer, :annotation clobits.all_targets.IVoidPointerYE, :ni/unwrap .unwrap}], Ret: {:ni/type int, :poly/wrapper .asInt, :poly/type int, :primitive true}"
 ^long
 [^clobits.all_targets.IVoidPointerYE win]
 (.asInt
  (.execute
   -place-of-wrefresh
   (clojure.core/object-array [(.unwrap win)]))))

