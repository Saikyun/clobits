;; This file is autogenerated -- probably shouldn't modify it by hand
(clojure.core/ns
 clobits.sdl.ni
 (:import clobits.wrappers.IWrapperNI)
 (:gen-class))

(clojure.core/defn
 get-sdl-init-video
 ^long
 []
 (clobits.sdl.ni.interop/get-sdl-init-video))

(clojure.core/defn
 get-sdl-window-shown
 ^long
 []
 (clobits.sdl.ni.interop/get-sdl-window-shown))

(clojure.core/defn
 get-null
 ^clobits.wrappers.WrapVoid
 []
 (new clobits.wrappers.WrapVoid (clobits.sdl.ni.interop/get-null)))

(clojure.core/defn
 gen-title
 ^clobits.wrappers.WrapPointer
 []
 (new clobits.wrappers.WrapPointer (clobits.sdl.ni.interop/gen-title)))

(clojure.core/defn
 create-rect
 ^clobits.sdl.ni.RectWrapper
 [^long x ^long y ^long w ^long h]
 (new clobits.sdl.ni.RectWrapper
  (clobits.sdl.ni.interop/create-rect x y w h)))

(clojure.core/defn
 get-e
 ^clobits.sdl.ni.EventWrapper
 []
 (new clobits.sdl.ni.EventWrapper (clobits.sdl.ni.interop/get-e)))

(clojure.core/defn
 init
 ^long
 [^long flags]
 (clobits.sdl.ni.interop/init flags))

(clojure.core/defn
 poll-event
 ^long
 [^clobits.wrappers.IWrapperNI event]
 (clobits.sdl.ni.interop/poll-event (.unwrap event)))

(clojure.core/defn delay  [^long ms] (clobits.sdl.ni.interop/delay ms))

(clojure.core/defn
 update-window-surface
 ^long
 [^clobits.wrappers.IWrapperNI window]
 (clobits.sdl.ni.interop/update-window-surface (.unwrap window)))

(clojure.core/defn
 get-window-surface
 ^clobits.sdl.ni.SurfaceWrapper
 [^clobits.wrappers.IWrapperNI window]
 (new clobits.sdl.ni.SurfaceWrapper
  (clobits.sdl.ni.interop/get-window-surface (.unwrap window))))

(clojure.core/defn
 map-rgb
 ^long
 [^clobits.wrappers.IWrapperNI format ^long r ^long g ^long b]
 (clobits.sdl.ni.interop/map-rgb (.unwrap format) r g b))

(clojure.core/defn
 create-window
 ^clobits.wrappers.WrapVoid
 [^clobits.wrappers.IWrapperNI
  title
  ^Long
  x
  ^Long
  y
  ^Long
  w
  ^Long
  h
  ^Long
  flags]
 (new clobits.wrappers.WrapVoid
  (clobits.sdl.ni.interop/create-window (.unwrap title) x y w h flags)))

(clojure.core/defn
 fill-rect
 ^long
 [^clobits.wrappers.IWrapperNI
  dst
  ^clobits.wrappers.IWrapperNI
  rect
  ^long
  color]
 (clobits.sdl.ni.interop/fill-rect (.unwrap dst) (.unwrap rect) color))

(clojure.core/defn quit  [] (clobits.sdl.ni.interop/quit))

