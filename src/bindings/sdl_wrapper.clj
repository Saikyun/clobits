;; This file is autogenerated -- probably shouldn't modify it by hand
(clojure.core/ns
 bindings.sdl-wrapper
 (:import
  clobits.all_targets.IWrapperNI
  bindings.sdl_ni_generated.WrapSDL_Surface
  bindings.sdl_ni_generated.WrapSDL_Event
  bindings.sdl_ni_generated.WrapSDL_Keysym
  clobits.wrappers.WrapPointer
  bindings.sdl_ni_generated.WrapSDL_PixelFormat
  clobits.wrappers.WrapVoid
  bindings.sdl_ni_generated.WrapSDL_Rect
  bindings.sdl_ni_generated.WrapSDL_KeyboardEvent)
 (:gen-class))

(clojure.core/defn
 get-sdl-init-video
 ^long
 []
 (bindings.sdl/get-sdl-init-video))

(clojure.core/defn
 get-sdl-window-shown
 ^long
 []
 (bindings.sdl/get-sdl-window-shown))

(clojure.core/defn
 get-null
 ^clobits.wrappers.WrapVoid
 []
 (new clobits.wrappers.WrapVoid (bindings.sdl/get-null)))

(clojure.core/defn
 gen-title
 ^clobits.wrappers.WrapPointer
 []
 (new clobits.wrappers.WrapPointer (bindings.sdl/gen-title)))

(clojure.core/defn
 create-rect
 ^bindings.sdl_ni_generated.WrapSDL_Rect
 [^long x ^long y ^long w ^long h]
 (new bindings.sdl_ni_generated.WrapSDL_Rect
  (bindings.sdl/create-rect x y w h)))

(clojure.core/defn
 get-e
 ^bindings.sdl_ni_generated.WrapSDL_Event
 []
 (new bindings.sdl_ni_generated.WrapSDL_Event (bindings.sdl/get-e)))

(clojure.core/defn init ^long [^long flags] (bindings.sdl/init flags))

(clojure.core/defn
 poll-event
 ^long
 [^clobits.all_targets.IWrapperNI event]
 (bindings.sdl/poll-event (.unwrap event)))

(clojure.core/defn delay  [^long ms] (bindings.sdl/delay ms))

(clojure.core/defn
 update-window-surface
 ^long
 [^clobits.all_targets.IWrapperNI window]
 (bindings.sdl/update-window-surface (.unwrap window)))

(clojure.core/defn
 get-window-surface
 ^bindings.sdl_ni_generated.WrapSDL_Surface
 [^clobits.all_targets.IWrapperNI window]
 (new bindings.sdl_ni_generated.WrapSDL_Surface
  (bindings.sdl/get-window-surface (.unwrap window))))

(clojure.core/defn
 map-rgb
 ^long
 [^clobits.all_targets.IWrapperNI format ^long r ^long g ^long b]
 (bindings.sdl/map-rgb (.unwrap format) r g b))

(clojure.core/defn
 create-window
 ^clobits.wrappers.WrapVoid
 [^clobits.all_targets.IWrapperNI
  title
  ^Long
  x
  ^Long
  y
  ^Long
  w
  ^Long
  h
  ^Long
  flags]
 (new clobits.wrappers.WrapVoid
  (bindings.sdl/create-window (.unwrap title) x y w h flags)))

(clojure.core/defn
 fill-rect
 ^long
 [^clobits.all_targets.IWrapperNI
  dst
  ^clobits.all_targets.IWrapperNI
  rect
  ^long
  color]
 (bindings.sdl/fill-rect (.unwrap dst) (.unwrap rect) color))

(clojure.core/defn quit  [] (bindings.sdl/quit))

