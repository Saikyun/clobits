;; This file is autogenerated -- probably shouldn't modify it by hand
(clojure.core/ns
 bindings.ncurses-ns
 (:require [clojure.java.io])
 (:import
  org.graalvm.polyglot.Context
  org.graalvm.polyglot.Source
  org.graalvm.polyglot.Value)
 (:gen-class))

(def ^{:private true} empty-array (clojure.core/object-array 0))

(clojure.core/defn
 context-f495
 []
 (clojure.core/->
  (org.graalvm.polyglot.Context/newBuilder
   (clojure.core/into-array ["llvm"]))
  (.allowAllAccess true)
  (.build)))

(clojure.core/defn
 ^{:private true}
 source-f496
 []
 (clojure.core/->
  (org.graalvm.polyglot.Source/newBuilder
   "llvm"
   (if
    (clojure.core/string? "libs/libbindings$ncurses.so")
    (clojure.java.io/file "libs/libbindings$ncurses.so")
    "libs/libbindings$ncurses.so"))
  (.build)))

(def polyglot-context (context-f495))

(def polyglot-lib (.eval polyglot-context (source-f496)))

(def
 ^{:private true}
 free497
 (.getMember polyglot-lib "_SHADOWING_free"))

(clojure.core/defn
 free
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper ptr]
 (.executeVoid free497 (clojure.core/object-array [(.unwrap ptr)])))

(def
 ^{:private true}
 malloc498
 (.getMember polyglot-lib "_SHADOWING_malloc"))

(clojure.core/defn
 malloc
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper size]
 (.executeVoid malloc498 (clojure.core/object-array [(.unwrap size)])))

(def
 ^{:private true}
 initscr499
 (.getMember polyglot-lib "_SHADOWING_initscr"))

(clojure.core/defn
 initscr
 "Ret: {:wrapper nil, :annotation nil}"
 
 []
 (.execute initscr499 (clojure.core/object-array [])))

(def
 ^{:private true}
 delwin500
 (.getMember polyglot-lib "_SHADOWING_delwin"))

(clojure.core/defn
 delwin
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper win]
 (clojure.core/->
  (.execute delwin500 (clojure.core/object-array [(.unwrap win)]))
  .asInt))

(def
 ^{:private true}
 endwin501
 (.getMember polyglot-lib "_SHADOWING_endwin"))

(clojure.core/defn
 endwin
 "Ret: {:wrapper nil, :annotation nil}"
 
 []
 (clojure.core/->
  (.execute endwin501 (clojure.core/object-array []))
  .asInt))

(def
 ^{:private true}
 noecho502
 (.getMember polyglot-lib "_SHADOWING_noecho"))

(clojure.core/defn
 noecho
 "Ret: {:wrapper nil, :annotation nil}"
 
 []
 (clojure.core/->
  (.execute noecho502 (clojure.core/object-array []))
  .asInt))

(def
 ^{:private true}
 curs-set503
 (.getMember polyglot-lib "_SHADOWING_curs_set"))

(clojure.core/defn
 curs-set
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper visibility]
 (clojure.core/->
  (.execute
   curs-set503
   (clojure.core/object-array [(.unwrap visibility)]))
  .asInt))

(def
 ^{:private true}
 mvprintw504
 (.getMember polyglot-lib "_SHADOWING_mvprintw"))

(clojure.core/defn
 mvprintw
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper
  y
  ^clobits.all_targets.IWrapper
  x
  ^clobits.all_targets.IWrapper
  fmt]
 (clojure.core/->
  (.execute
   mvprintw504
   (clojure.core/object-array [(.unwrap y) (.unwrap x) (.unwrap fmt)]))
  .asInt))

(def
 ^{:private true}
 clear505
 (.getMember polyglot-lib "_SHADOWING_clear"))

(clojure.core/defn
 clear
 "Ret: {:wrapper nil, :annotation nil}"
 
 []
 (clojure.core/->
  (.execute clear505 (clojure.core/object-array []))
  .asInt))

(def
 ^{:private true}
 getmaxx506
 (.getMember polyglot-lib "_SHADOWING_getmaxx"))

(clojure.core/defn
 getmaxx
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper win]
 (clojure.core/->
  (.execute getmaxx506 (clojure.core/object-array [(.unwrap win)]))
  .asInt))

(def
 ^{:private true}
 getmaxy507
 (.getMember polyglot-lib "_SHADOWING_getmaxy"))

(clojure.core/defn
 getmaxy
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper win]
 (clojure.core/->
  (.execute getmaxy507 (clojure.core/object-array [(.unwrap win)]))
  .asInt))

(def
 ^{:private true}
 getmaxyx508
 (.getMember polyglot-lib "_SHADOWING_getmaxyx"))

(clojure.core/defn
 getmaxyx
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper
  win
  ^clobits.all_targets.IWrapper
  y
  ^clobits.all_targets.IWrapper
  x]
 (.executeVoid
  getmaxyx508
  (clojure.core/object-array [(.unwrap win) (.unwrap y) (.unwrap x)])))

(def
 ^{:private true}
 printw509
 (.getMember polyglot-lib "_SHADOWING_printw"))

(clojure.core/defn
 printw
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper arg0]
 (clojure.core/->
  (.execute printw509 (clojure.core/object-array [(.unwrap arg0)]))
  .asInt))

(def
 ^{:private true}
 refresh510
 (.getMember polyglot-lib "_SHADOWING_refresh"))

(clojure.core/defn
 refresh
 "Ret: {:wrapper nil, :annotation nil}"
 
 []
 (clojure.core/->
  (.execute refresh510 (clojure.core/object-array []))
  .asInt))

(def
 ^{:private true}
 wrefresh511
 (.getMember polyglot-lib "_SHADOWING_wrefresh"))

(clojure.core/defn
 wrefresh
 "Ret: {:wrapper nil, :annotation nil}"
 
 [^clobits.all_targets.IWrapper win]
 (clojure.core/->
  (.execute wrefresh511 (clojure.core/object-array [(.unwrap win)]))
  .asInt))

