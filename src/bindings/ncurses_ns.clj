;; This file is autogenerated -- probably shouldn't modify it by hand
(clojure.core/ns
 bindings.ncurses-ns
 (:require [clojure.java.io])
 (:import
  org.graalvm.polyglot.Context
  org.graalvm.polyglot.Source
  org.graalvm.polyglot.Value))

(def ^{:private true} empty-array (clojure.core/object-array 0))

(clojure.core/defn
 context-f635
 []
 (clojure.core/->
  (org.graalvm.polyglot.Context/newBuilder
   (clojure.core/into-array ["llvm"]))
  (.allowAllAccess true)
  (.build)))

(clojure.core/defn
 ^{:private true}
 source-f636
 []
 (clojure.core/->
  (org.graalvm.polyglot.Source/newBuilder
   "llvm"
   (if
    (clojure.core/string? "libs/libbindings$ncurses.so")
    (clojure.java.io/file "libs/libbindings$ncurses.so")
    "libs/libbindings$ncurses.so"))
  (.build)))

(def polyglot-context (context-f635))

(def polyglot-lib (.eval polyglot-context (source-f636)))

(def
 ^{:private true}
 free637
 (.getMember polyglot-lib "_SHADOWING_free"))

(clojure.core/defn
 free
 ([ptr] (.executeVoid free637 (clojure.core/object-array [ptr]))))

(def
 ^{:private true}
 malloc638
 (.getMember polyglot-lib "_SHADOWING_malloc"))

(clojure.core/defn
 malloc
 ([size] (.executeVoid malloc638 (clojure.core/object-array [size]))))

(def
 ^{:private true}
 initscr639
 (.getMember polyglot-lib "_SHADOWING_initscr"))

(clojure.core/defn initscr ([] (.execute initscr639 empty-array)))

(def
 ^{:private true}
 delwin640
 (.getMember polyglot-lib "_SHADOWING_delwin"))

(clojure.core/defn
 delwin
 ([win]
  (clojure.core/->
   (.execute delwin640 (clojure.core/object-array [win]))
   .asInt)))

(def
 ^{:private true}
 endwin641
 (.getMember polyglot-lib "_SHADOWING_endwin"))

(clojure.core/defn
 endwin
 ([] (clojure.core/-> (.execute endwin641 empty-array) .asInt)))

(def
 ^{:private true}
 printw642
 (.getMember polyglot-lib "_SHADOWING_printw"))

(clojure.core/defn
 printw
 ([arg0]
  (clojure.core/->
   (.execute printw642 (clojure.core/object-array [arg0]))
   .asInt)))

(def
 ^{:private true}
 refresh643
 (.getMember polyglot-lib "_SHADOWING_refresh"))

(clojure.core/defn
 refresh
 ([] (clojure.core/-> (.execute refresh643 empty-array) .asInt)))

(def
 ^{:private true}
 wrefresh644
 (.getMember polyglot-lib "_SHADOWING_wrefresh"))

(clojure.core/defn
 wrefresh
 ([win]
  (clojure.core/->
   (.execute wrefresh644 (clojure.core/object-array [win]))
   .asInt)))

