;; This file is autogenerated -- probably shouldn't modify it by hand
(clojure.core/ns
 bindings.sdl-ns
 (:require [clojure.java.io])
 (:import
  org.graalvm.polyglot.Context
  org.graalvm.polyglot.Source
  org.graalvm.polyglot.Value))

(def ^{:private true} empty-array (clojure.core/object-array 0))

(clojure.core/defn
 context-f615
 []
 (clojure.core/->
  (org.graalvm.polyglot.Context/newBuilder
   (clojure.core/into-array ["llvm"]))
  (.allowAllAccess true)
  (.build)))

(clojure.core/defn
 ^{:private true}
 source-f616
 []
 (clojure.core/->
  (org.graalvm.polyglot.Source/newBuilder
   "llvm"
   (if
    (clojure.core/string? "libs/libbindings$sdl.so")
    (clojure.java.io/file "libs/libbindings$sdl.so")
    "libs/libbindings$sdl.so"))
  (.build)))

(def polyglot-context (context-f615))

(def polyglot-lib (.eval polyglot-context (source-f616)))

(clojure.core/gen-interface
 :name
 ^{org.graalvm.polyglot.HostAccess$Implementable true}
 bindings.sdl_poly.SDL_Event
 :methods
 [[type [] int]])

(clojure.core/gen-interface
 :name
 ^{org.graalvm.polyglot.HostAccess$Implementable true}
 bindings.sdl_poly.SDL_Surface
 :methods
 [[format [] bindings.sdl_poly.SDL_PixelFormat]])

(clojure.core/gen-interface
 :name
 ^{org.graalvm.polyglot.HostAccess$Implementable true}
 bindings.sdl_poly.SDL_PixelFormat
 :methods
 [[palette [] org.graalvm.nativeimage.c.type.VoidPointer]])

(def
 ^{:private true}
 get-sdl-init-video617
 (.getMember polyglot-lib "_SHADOWING_GET_SDL_INIT_VIDEO"))

(clojure.core/defn
 get-sdl-init-video
 ([]
  (clojure.core/->
   (.execute get-sdl-init-video617 empty-array)
   .asInt)))

(def
 ^{:private true}
 get-sdl-window-shown618
 (.getMember polyglot-lib "_SHADOWING_GET_SDL_WINDOW_SHOWN"))

(clojure.core/defn
 get-sdl-window-shown
 ([]
  (clojure.core/->
   (.execute get-sdl-window-shown618 empty-array)
   .asInt)))

(def
 ^{:private true}
 get-null619
 (.getMember polyglot-lib "_SHADOWING_get_null"))

(clojure.core/defn get-null ([] (.executeVoid get-null619 empty-array)))

(def
 ^{:private true}
 gen-title620
 (.getMember polyglot-lib "_SHADOWING_gen_title"))

(clojure.core/defn gen-title ([] (.execute gen-title620 empty-array)))

(def
 ^{:private true}
 create-rect621
 (.getMember polyglot-lib "_SHADOWING_create_rect"))

(clojure.core/defn
 create-rect
 ([x y w h]
  (.execute create-rect621 (clojure.core/object-array [x y w h]))))

(def
 ^{:private true}
 get-e622
 (.getMember polyglot-lib "_SHADOWING_get_e"))

(clojure.core/defn
 get-e
 ([] (.as (.execute get-e622 empty-array) bindings.sdl_poly.SDL_Event)))

(def
 ^{:private true}
 init623
 (.getMember polyglot-lib "_SHADOWING_SDL_Init"))

(clojure.core/defn
 init
 ([flags]
  (clojure.core/->
   (.execute init623 (clojure.core/object-array [flags]))
   .asInt)))

(def
 ^{:private true}
 poll-event624
 (.getMember polyglot-lib "_SHADOWING_SDL_PollEvent"))

(clojure.core/defn
 poll-event
 ([event]
  (clojure.core/->
   (.execute poll-event624 (clojure.core/object-array [event]))
   .asInt)))

(def
 ^{:private true}
 delay625
 (.getMember polyglot-lib "_SHADOWING_SDL_Delay"))

(clojure.core/defn
 delay
 ([ms] (.executeVoid delay625 (clojure.core/object-array [ms]))))

(def
 ^{:private true}
 update-window-surface626
 (.getMember polyglot-lib "_SHADOWING_SDL_UpdateWindowSurface"))

(clojure.core/defn
 update-window-surface
 ([window]
  (clojure.core/->
   (.execute
    update-window-surface626
    (clojure.core/object-array [window]))
   .asInt)))

(def
 ^{:private true}
 get-window-surface627
 (.getMember polyglot-lib "_SHADOWING_SDL_GetWindowSurface"))

(clojure.core/defn
 get-window-surface
 ([window]
  (.as
   (.execute
    get-window-surface627
    (clojure.core/object-array [window]))
   bindings.sdl_poly.SDL_Surface)))

(def
 ^{:private true}
 map-rgb628
 (.getMember polyglot-lib "_SHADOWING_SDL_MapRGB"))

(clojure.core/defn
 map-rgb
 ([format r g b]
  (clojure.core/->
   (.execute map-rgb628 (clojure.core/object-array [format r g b]))
   .asInt)))

(def
 ^{:private true}
 create-window629
 (.getMember polyglot-lib "_SHADOWING_SDL_CreateWindow"))

(clojure.core/defn
 create-window
 ([title x y w h flags]
  (.execute
   create-window629
   (clojure.core/object-array [title x y w h flags]))))

(def
 ^{:private true}
 fill-rect630
 (.getMember polyglot-lib "_SHADOWING_SDL_FillRect"))

(clojure.core/defn
 fill-rect
 ([dst rect color]
  (clojure.core/->
   (.execute fill-rect630 (clojure.core/object-array [dst rect color]))
   .asInt)))

(def
 ^{:private true}
 quit631
 (.getMember polyglot-lib "_SHADOWING_SDL_Quit"))

(clojure.core/defn quit ([] (.executeVoid quit631 empty-array)))

